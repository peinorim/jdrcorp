<?php

namespace Proxies\__CG__\JdrCorp\GuildesBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Arme extends \JdrCorp\GuildesBundle\Entity\Arme implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'id', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'nom', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'init', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'att', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'def', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'blessure', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'enc', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'fort', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'cad', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'pmoy', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'peff', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'competence');
        }

        return array('__isInitialized__', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'id', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'nom', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'init', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'att', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'def', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'blessure', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'enc', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'fort', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'cad', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'pmoy', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'peff', '' . "\0" . 'JdrCorp\\GuildesBundle\\Entity\\Arme' . "\0" . 'competence');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Arme $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', array($nom));

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', array());

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setInit($init)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInit', array($init));

        return parent::setInit($init);
    }

    /**
     * {@inheritDoc}
     */
    public function getInit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInit', array());

        return parent::getInit();
    }

    /**
     * {@inheritDoc}
     */
    public function setAtt($att)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAtt', array($att));

        return parent::setAtt($att);
    }

    /**
     * {@inheritDoc}
     */
    public function getAtt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAtt', array());

        return parent::getAtt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDef($def)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDef', array($def));

        return parent::setDef($def);
    }

    /**
     * {@inheritDoc}
     */
    public function getDef()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDef', array());

        return parent::getDef();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlessure($blessure)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlessure', array($blessure));

        return parent::setBlessure($blessure);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlessure()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlessure', array());

        return parent::getBlessure();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnc($enc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnc', array($enc));

        return parent::setEnc($enc);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnc', array());

        return parent::getEnc();
    }

    /**
     * {@inheritDoc}
     */
    public function setFort($fort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFort', array($fort));

        return parent::setFort($fort);
    }

    /**
     * {@inheritDoc}
     */
    public function getFort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFort', array());

        return parent::getFort();
    }

    /**
     * {@inheritDoc}
     */
    public function setCad($cad)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCad', array($cad));

        return parent::setCad($cad);
    }

    /**
     * {@inheritDoc}
     */
    public function getCad()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCad', array());

        return parent::getCad();
    }

    /**
     * {@inheritDoc}
     */
    public function setPmoy($pmoy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPmoy', array($pmoy));

        return parent::setPmoy($pmoy);
    }

    /**
     * {@inheritDoc}
     */
    public function getPmoy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPmoy', array());

        return parent::getPmoy();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeff($peff)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeff', array($peff));

        return parent::setPeff($peff);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeff()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeff', array());

        return parent::getPeff();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompetence(\JdrCorp\GuildesBundle\Entity\Competence $competence)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompetence', array($competence));

        return parent::setCompetence($competence);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompetence()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompetence', array());

        return parent::getCompetence();
    }

}
